// This file is generated by Ubpa::USRefl::AutoRefl

#pragma once

#include <USRefl/USRefl.h>

template<>
struct Ubpa::USRefl::TypeInfo<Ubpa::UECS::CmptPtr> :
    TypeInfoBase<Ubpa::UECS::CmptPtr>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[20] = "Ubpa::UECS::CmptPtr";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR(UMeta::constructor), WrapConstructor<Type(UECS::CmptType, void*)>()},
        Field {TSTR(UMeta::constructor), WrapConstructor<Type()>()},
        Field {TSTR("Ptr"), &Type::Ptr},
        Field {TSTR("Type"), &Type::Type},
        Field {TSTR("Invalid"), &Type::Invalid},
        Field {TSTR("Valid"), &Type::Valid},
    };
};

template<>
struct Ubpa::USRefl::TypeInfo<Ubpa::UECS::CmptAccessPtr> :
    TypeInfoBase<Ubpa::UECS::CmptAccessPtr>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[26] = "Ubpa::UECS::CmptAccessPtr";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR(UMeta::constructor), WrapConstructor<Type(UECS::CmptType, void*, UECS::AccessMode)>()},
        Field {TSTR(UMeta::constructor), WrapConstructor<Type(UECS::CmptAccessType, void*)>()},
        Field {TSTR(UMeta::constructor), WrapConstructor<Type(UECS::CmptPtr, UECS::AccessMode)>()},
        Field {TSTR(UMeta::constructor), WrapConstructor<Type(UECS::CmptPtr)>()},
        Field {TSTR(UMeta::constructor), WrapConstructor<Type()>()},
        Field {TSTR("operatorCmptPtr"), &Type::operator UECS::CmptPtr},
        Field {TSTR("Ptr"), &Type::Ptr},
        Field {TSTR("AccessType"), &Type::AccessType},
        Field {TSTR("Invalid"), &Type::Invalid},
        Field {TSTR("Valid"), &Type::Valid},
    };
};

