// This file is generated by Ubpa::USRefl::AutoRefl

#pragma once

#include <USRefl/USRefl.h>

template<>
struct Ubpa::USRefl::TypeInfo<Ubpa::UECS::CmptType> :
    TypeInfoBase<Ubpa::UECS::CmptType>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[21] = "Ubpa::UECS::CmptType";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR(UMeta::constructor), WrapConstructor<Type(size_t)>()},
        Field {TSTR(UMeta::constructor), WrapConstructor<Type(std::string_view)>()},
        Field {TSTR(UMeta::constructor), WrapConstructor<Type()>()},
        Field {TSTR("HashCode"), &Type::HashCode},
        Field {TSTR("Invalid"), &Type::Invalid},
        Field {TSTR("Valid"), &Type::Valid},
        Field {TSTR("Is"), static_cast<bool(Type::*)(std::string_view)const noexcept>(&Type::Is)},
        Field {TSTR("operator<"), &Type::operator<},
        Field {TSTR("operator<="), &Type::operator<=},
        Field {TSTR("operator>"), &Type::operator>},
        Field {TSTR("operator>="), &Type::operator>=},
        Field {TSTR("operator=="), &Type::operator==},
        Field {TSTR("operator!="), &Type::operator!=},
    };
};

template<>
struct Ubpa::USRefl::TypeInfo<Ubpa::UECS::CmptAccessType> :
    TypeInfoBase<Ubpa::UECS::CmptAccessType>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
    static constexpr char name[27] = "Ubpa::UECS::CmptAccessType";
#endif
    static constexpr AttrList attrs = {};
    static constexpr FieldList fields = {
        Field {TSTR(UMeta::constructor), WrapConstructor<Type(size_t, UECS::AccessMode)>(), AttrList {
            Attr {TSTR(UMeta::default_functions), std::tuple {
                WrapConstructor<Type(size_t)>()
            }},
        }},
        Field {TSTR(UMeta::constructor), WrapConstructor<Type(std::string_view, UECS::AccessMode)>(), AttrList {
            Attr {TSTR(UMeta::default_functions), std::tuple {
                WrapConstructor<Type(std::string_view)>()
            }},
        }},
        Field {TSTR(UMeta::constructor), WrapConstructor<Type(UECS::CmptType, UECS::AccessMode)>(), AttrList {
            Attr {TSTR(UMeta::default_functions), std::tuple {
                WrapConstructor<Type(UECS::CmptType)>()
            }},
        }},
        Field {TSTR(UMeta::constructor), WrapConstructor<Type()>()},
        Field {TSTR("HashCode"), &Type::HashCode},
        Field {TSTR("GetCmptType"), &Type::GetCmptType},
        Field {TSTR("GetAccessMode"), &Type::GetAccessMode},
        Field {TSTR("operatorCmptType"), &Type::operator UECS::CmptType},
        Field {TSTR("Invalid"), &Type::Invalid},
        Field {TSTR("Valid"), &Type::Valid},
        Field {TSTR("operator<"), static_cast<bool(Type::*)(const UECS::CmptAccessType&)const noexcept>(&Type::operator<)},
        Field {TSTR("operator<="), static_cast<bool(Type::*)(const UECS::CmptAccessType&)const noexcept>(&Type::operator<=)},
        Field {TSTR("operator>"), static_cast<bool(Type::*)(const UECS::CmptAccessType&)const noexcept>(&Type::operator>)},
        Field {TSTR("operator>="), static_cast<bool(Type::*)(const UECS::CmptAccessType&)const noexcept>(&Type::operator>=)},
        Field {TSTR("operator=="), static_cast<bool(Type::*)(const UECS::CmptAccessType&)const noexcept>(&Type::operator==)},
        Field {TSTR("operator!="), static_cast<bool(Type::*)(const UECS::CmptAccessType&)const noexcept>(&Type::operator!=)},
        Field {TSTR("operator<"), static_cast<bool(Type::*)(const UECS::CmptType&)const noexcept>(&Type::operator<)},
        Field {TSTR("operator<="), static_cast<bool(Type::*)(const UECS::CmptType&)const noexcept>(&Type::operator<=)},
        Field {TSTR("operator>"), static_cast<bool(Type::*)(const UECS::CmptType&)const noexcept>(&Type::operator>)},
        Field {TSTR("operator>="), static_cast<bool(Type::*)(const UECS::CmptType&)const noexcept>(&Type::operator>=)},
        Field {TSTR("operator=="), static_cast<bool(Type::*)(const UECS::CmptType&)const noexcept>(&Type::operator==)},
        Field {TSTR("operator!="), static_cast<bool(Type::*)(const UECS::CmptType&)const noexcept>(&Type::operator!=)},
    };
};

