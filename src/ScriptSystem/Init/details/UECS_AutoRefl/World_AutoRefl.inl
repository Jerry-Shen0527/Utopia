// This file is generated by Ubpa::USRefl::AutoRefl

#pragma once

#include <USRefl/USRefl.h>
#include <UTemplate/Func.h>

template<>
struct Ubpa::USRefl::TypeInfo<Ubpa::UECS::World> :
	TypeInfoBase<Ubpa::UECS::World>
{
#ifdef UBPA_USREFL_NOT_USE_NAMEOF
	static constexpr char name[18] = "Ubpa::UECS::World";
#endif
	static constexpr AttrList attrs = {};
	static constexpr FieldList fields = {
		Field {TSTR(UMeta::constructor), WrapConstructor<Type()>()},
		Field {TSTR(UMeta::constructor), WrapConstructor<Type(const UECS::World&)>()},
		Field {TSTR(UMeta::constructor), WrapConstructor<Type(UECS::World&&)>()},
		Field {TSTR(UMeta::destructor), WrapDestructor<Type>()},
		Field {TSTR("systemMngr"), &Type::systemMngr},
		Field {TSTR("entityMngr"), &Type::entityMngr},
		Field {TSTR("Update"), &Type::Update},
		Field {TSTR("AddCommand"), &Type::AddCommand, AttrList {
			Attr {TSTR(UMeta::default_functions), std::tuple {
				[](Type* __this, std::function<void()> command) { return __this->AddCommand(std::forward<std::function<void()>>(command)); }
			}},
		}},
		Field {TSTR("DumpUpdateJobGraph"), &Type::DumpUpdateJobGraph},
		Field {TSTR("GenUpdateFrameGraph"), &Type::GenUpdateFrameGraph},
		Field {TSTR("Accept"), &Type::Accept},
		Field {TSTR("RunEntityJob"), Ubpa::DecayLambda(
			[](
				Ubpa::UECS::World* world,
				std::function<void(
					Ubpa::UECS::World*,
					Ubpa::UECS::SingletonsView,
					Ubpa::UECS::Entity,
					size_t,
					Ubpa::UECS::CmptsView
				)> func,
				Ubpa::UECS::ArchetypeFilter archetypeFilter,
				Ubpa::UECS::CmptLocator cmptLocator,
				Ubpa::UECS::SingletonLocator singletonLocator,
				bool isParallel
			) {
				world->RunEntityJob(
					std::move(func),
					isParallel,
					std::move(archetypeFilter),
					std::move(cmptLocator),
					std::move(singletonLocator)
				);
			}
		)},
		Field {TSTR("RunChunkJob"), Ubpa::DecayLambda(
			[](
				Ubpa::UECS::World* world,
				std::function<void(
					Ubpa::UECS::World*,
					Ubpa::UECS::ChunkView,
					Ubpa::UECS::SingletonsView
				)> func,
				Ubpa::UECS::ArchetypeFilter archetypeFilter,
				Ubpa::UECS::SingletonLocator singletonLocator,
				bool isParallel
			) {
				world->RunChunkJob(
					std::move(func),
					std::move(archetypeFilter),
					isParallel,
					std::move(singletonLocator)
				);
			}
		)},
	};
};
